// This file is auto-generated by @hey-api/openapi-ts

export const AssistantMessageSchema = {
  properties: {
    thread_id: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Thread Id'
    },
    metadata: {
      $ref: '#/components/schemas/MessageMetadata'
    },
    role: {
      type: 'string',
      const: 'assistant',
      title: 'Role',
      default: 'assistant'
    },
    content: {
      type: 'string',
      title: 'Content'
    }
  },
  type: 'object',
  required: ['content'],
  title: 'AssistantMessage'
} as const

export const EvalLogSchema = {
  properties: {
    explanation: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Explanation'
    }
  },
  type: 'object',
  title: 'EvalLog'
} as const

export const EvalResultSchema = {
  properties: {
    score: {
      anyOf: [
        {
          type: 'number'
        },
        {
          type: 'null'
        }
      ],
      title: 'Score'
    },
    triggered: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered'
    },
    triggered_escalation: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered Escalation'
    },
    triggered_guardrail: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered Guardrail'
    },
    log: {
      anyOf: [
        {
          $ref: '#/components/schemas/EvalLog'
        },
        {
          type: 'null'
        }
      ]
    }
  },
  type: 'object',
  title: 'EvalResult'
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError'
      },
      type: 'array',
      title: 'Detail'
    }
  },
  type: 'object',
  title: 'HTTPValidationError'
} as const

export const MessageMetadataSchema = {
  properties: {
    original_llm_response: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Original Llm Response'
    },
    is_expert_answer: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Is Expert Answer'
    },
    guardrailed: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Guardrailed'
    },
    escalated_to_sme: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Escalated To Sme'
    },
    scores: {
      anyOf: [
        {
          additionalProperties: {
            $ref: '#/components/schemas/EvalResult'
          },
          type: 'object'
        },
        {
          type: 'null'
        }
      ],
      title: 'Scores'
    }
  },
  type: 'object',
  title: 'MessageMetadata'
} as const

export const ToolCallSchema = {
  properties: {
    tool_call_id: {
      type: 'string',
      title: 'Tool Call Id'
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name'
    },
    arguments: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Arguments'
    },
    result: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Result'
    },
    error: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Error'
    }
  },
  type: 'object',
  required: ['tool_call_id', 'tool_name', 'arguments'],
  title: 'ToolCall'
} as const

export const ToolCallMessageSchema = {
  properties: {
    thread_id: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Thread Id'
    },
    metadata: {
      $ref: '#/components/schemas/MessageMetadata'
    },
    role: {
      type: 'string',
      const: 'tool',
      title: 'Role',
      default: 'tool'
    },
    content: {
      $ref: '#/components/schemas/ToolCall'
    }
  },
  type: 'object',
  required: ['content'],
  title: 'ToolCallMessage'
} as const

export const UserMessageSchema = {
  properties: {
    thread_id: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Thread Id'
    },
    metadata: {
      $ref: '#/components/schemas/MessageMetadata'
    },
    role: {
      type: 'string',
      const: 'user',
      title: 'Role',
      default: 'user'
    },
    content: {
      type: 'string',
      title: 'Content'
    }
  },
  type: 'object',
  required: ['content'],
  title: 'UserMessage'
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'integer'
          }
        ]
      },
      type: 'array',
      title: 'Location'
    },
    msg: {
      type: 'string',
      title: 'Message'
    },
    type: {
      type: 'string',
      title: 'Error Type'
    }
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError'
} as const
